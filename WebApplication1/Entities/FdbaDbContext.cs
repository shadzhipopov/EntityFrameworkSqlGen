// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebApplication1.Entities;

public partial class FdbaDbContext : DbContext
{
    public FdbaDbContext(DbContextOptions<FdbaDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BusinessModule> BusinessModule { get; set; }

    public virtual DbSet<BusinessObject> BusinessObject { get; set; }

    public virtual DbSet<BusinessProperty> BusinessProperty { get; set; }

    public virtual DbSet<BusinessPropertyType> BusinessPropertyType { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BusinessModule>(entity =>
        {
            entity.ToTable("BusinessModule", "fdba");

            entity.HasIndex(e => e.DatabaseInfoId, "IX_BusinessModule_DatabaseInfoId");

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<BusinessObject>(entity =>
        {
            entity.ToTable("BusinessObject", "fdba");

            entity.HasIndex(e => e.BaseObjectId, "IX_BusinessObject_BaseObjectId");

            entity.HasIndex(e => e.BusinessModuleId, "IX_BusinessObject_BusinessModuleId");

            entity.HasIndex(e => e.BusinessObjectGroupId, "IX_BusinessObject_BusinessObjectGroupId");

            entity.HasIndex(e => e.NamePropertyId, "IX_BusinessObject_NamePropertyId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.BaseObject).WithMany(p => p.InverseBaseObject).HasForeignKey(d => d.BaseObjectId);

            entity.HasOne(d => d.BusinessModule).WithMany(p => p.BusinessObject).HasForeignKey(d => d.BusinessModuleId);

            entity.HasOne(d => d.NameProperty).WithMany(p => p.BusinessObject).HasForeignKey(d => d.NamePropertyId);
        });

        modelBuilder.Entity<BusinessProperty>(entity =>
        {
            entity.ToTable("BusinessProperty", "fdba");

            entity.HasIndex(e => e.BusinessObjectId, "IX_BusinessProperty_BusinessObjectId");

            entity.HasIndex(e => e.ComputeExpressionId, "IX_BusinessProperty_ComputeExpressionId");

            entity.HasIndex(e => e.EnumerationTypeId, "IX_BusinessProperty_EnumerationTypeId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.BusinessObjectNavigation).WithMany(p => p.BusinessProperty).HasForeignKey(d => d.BusinessObjectId);
        });

        modelBuilder.Entity<BusinessPropertyType>(entity =>
        {
            entity.ToTable("BusinessPropertyType", "fdba");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BusinessPropertyType)
                .HasForeignKey<BusinessPropertyType>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}