// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebApplication1.Entities;

public partial class FdbaDbContext : DbContext
{
    public FdbaDbContext(DbContextOptions<FdbaDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BusinessModule> BusinessModules { get; set; }

    public virtual DbSet<BusinessObject> BusinessObjects { get; set; }

    public virtual DbSet<BusinessObjectExpression> BusinessObjectExpressions { get; set; }

    public virtual DbSet<BusinessObjectRelation> BusinessObjectRelations { get; set; }

    public virtual DbSet<BusinessProperty> BusinessProperties { get; set; }

    public virtual DbSet<BusinessPropertyType> BusinessPropertyTypes { get; set; }

    public virtual DbSet<ForeignKey> ForeignKeys { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BusinessModule>(entity =>
        {
            entity.ToTable("BusinessModule", "fdba");

            entity.HasIndex(e => e.DatabaseInfoId, "IX_BusinessModule_DatabaseInfoId");

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<BusinessObject>(entity =>
        {
            entity.ToTable("BusinessObject", "fdba");

            entity.HasIndex(e => e.BaseObjectId, "IX_BusinessObject_BaseObjectId");

            entity.HasIndex(e => e.BusinessModuleId, "IX_BusinessObject_BusinessModuleId");

            entity.HasIndex(e => e.BusinessObjectGroupId, "IX_BusinessObject_BusinessObjectGroupId");

            entity.HasIndex(e => e.NamePropertyId, "IX_BusinessObject_NamePropertyId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.BaseObject).WithMany(p => p.InverseBaseObject).HasForeignKey(d => d.BaseObjectId);

            entity.HasOne(d => d.BusinessModule).WithMany(p => p.BusinessObjects).HasForeignKey(d => d.BusinessModuleId);

            entity.HasOne(d => d.NameProperty).WithMany(p => p.BusinessObjects).HasForeignKey(d => d.NamePropertyId);
        });

        modelBuilder.Entity<BusinessObjectExpression>(entity =>
        {
            entity.ToTable("BusinessObjectExpression", "fdba");

            entity.HasIndex(e => e.BusinessObjectId, "IX_BusinessObjectExpression_BusinessObjectId");

            entity.HasIndex(e => e.TargetPropertyId, "IX_BusinessObjectExpression_TargetPropertyId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.BusinessObject).WithMany(p => p.BusinessObjectExpressions).HasForeignKey(d => d.BusinessObjectId);

            entity.HasOne(d => d.TargetProperty).WithMany(p => p.BusinessObjectExpressions).HasForeignKey(d => d.TargetPropertyId);
        });

        modelBuilder.Entity<BusinessObjectRelation>(entity =>
        {
            entity.ToTable("BusinessObjectRelation", "fdba");

            entity.HasIndex(e => e.FromObjectId, "IX_BusinessObjectRelation_FromObjectId");

            entity.HasIndex(e => e.ManyToManyObjectId, "IX_BusinessObjectRelation_ManyToManyObjectId");

            entity.HasIndex(e => e.ToObjectId, "IX_BusinessObjectRelation_ToObjectId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.FromObject).WithMany(p => p.BusinessObjectRelationFromObjects)
                .HasForeignKey(d => d.FromObjectId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.ManyToManyObject).WithMany(p => p.BusinessObjectRelationManyToManyObjects).HasForeignKey(d => d.ManyToManyObjectId);

            entity.HasOne(d => d.ToObject).WithMany(p => p.BusinessObjectRelationToObjects)
                .HasForeignKey(d => d.ToObjectId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<BusinessProperty>(entity =>
        {
            entity.ToTable("BusinessProperty", "fdba");

            entity.HasIndex(e => e.BusinessObjectId, "IX_BusinessProperty_BusinessObjectId");

            entity.HasIndex(e => e.ComputeExpressionId, "IX_BusinessProperty_ComputeExpressionId");

            entity.HasIndex(e => e.EnumerationTypeId, "IX_BusinessProperty_EnumerationTypeId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.BusinessObject).WithMany(p => p.BusinessProperties).HasForeignKey(d => d.BusinessObjectId);

            entity.HasOne(d => d.ComputeExpression).WithMany(p => p.BusinessProperties).HasForeignKey(d => d.ComputeExpressionId);
        });

        modelBuilder.Entity<BusinessPropertyType>(entity =>
        {
            entity.ToTable("BusinessPropertyType", "fdba");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BusinessPropertyType)
                .HasForeignKey<BusinessPropertyType>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ForeignKey>(entity =>
        {
            entity.ToTable("ForeignKey", "fdba");

            entity.HasIndex(e => e.BusinessObjectRelationId, "IX_ForeignKey_BusinessObjectRelationId");

            entity.HasIndex(e => e.ForeignKeyPropertyId, "IX_ForeignKey_ForeignKeyPropertyId");

            entity.HasIndex(e => e.PrimaryKeyPropertyId, "IX_ForeignKey_PrimaryKeyPropertyId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.BusinessObjectRelation).WithMany(p => p.ForeignKeys).HasForeignKey(d => d.BusinessObjectRelationId);

            entity.HasOne(d => d.ForeignKeyProperty).WithMany(p => p.ForeignKeyForeignKeyProperties)
                .HasForeignKey(d => d.ForeignKeyPropertyId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.PrimaryKeyProperty).WithMany(p => p.ForeignKeyPrimaryKeyProperties)
                .HasForeignKey(d => d.PrimaryKeyPropertyId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}