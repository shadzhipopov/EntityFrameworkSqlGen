// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DataAccess.Configurators.Expressions.LeafNodes;
using DataAccess.Configurators.Expressions.OperatorNodes;
using DataAccess.Configurators.Expressions;
using Microsoft.EntityFrameworkCore;
using Model.Expressions;
using Model.Expressions.LeafNodes;
using DataAccess.Configurators.Metadata;
using Model.Helpers;
using DataAccess.Configurators;
using Model.Expressions.OperatorNodes;
using Microsoft.Extensions.Options;
#nullable disable

namespace DataAccess.Entities
{
    public partial class FdbaDbContext : DbContext
    {
        public FdbaDbContext()
        {
        }

        public FdbaDbContext(DbContextOptions<FdbaDbContext> options)
            : base(options)
        {
            
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.LogTo(Console.WriteLine);
            base.OnConfiguring(optionsBuilder);
        }

        public DbSet<ExpressionNode> ExpressionNodes { get; set; }
        public DbSet<AggregateFunctionNode> AggregateFunctionNodes { get; set; }

        //public virtual DbSet<BusinessModule> BusinessModules { get; set; }
        //public virtual DbSet<BusinessObject> BusinessObjects { get; set; }
        //public virtual DbSet<BusinessObjectExpression> BusinessObjectExpressions { get; set; }
        //public virtual DbSet<BusinessObjectGroup> BusinessObjectGroups { get; set; }
        //public virtual DbSet<BusinessObjectRelation> BusinessObjectRelations { get; set; }
        //public virtual DbSet<BusinessProperty> BusinessProperties { get; set; }
        //public virtual DbSet<BusinessPropertyType> BusinessPropertyTypes { get; set; }
        //public virtual DbSet<Container> Containers { get; set; }
        //public virtual DbSet<ContainerRole> ContainerRoles { get; set; }
        //public virtual DbSet<DatabaseDataType> DatabaseDataTypes { get; set; }
        //public virtual DbSet<DatabaseInfo> DatabaseInfos { get; set; }
        //public virtual DbSet<EnumerationType> EnumerationTypes { get; set; }
        //public virtual DbSet<EnumerationValue> EnumerationValues { get; set; }
        //public virtual DbSet<ExpressionNode> ExpressionNodes { get; set; }
        //public virtual DbSet<EnumerationValueLeafNode> EnumerationValueLeafNodes { get; set; }
        //public virtual DbSet<ForeignKey> ForeignKeys { get; set; }
        //public virtual DbSet<ImportPropertyInfo> ImportPropertyInfos { get; set; }
        //public virtual DbSet<MappingProperty> MappingProperties { get; set; }
        //public virtual DbSet<MetadataItemPathRelation> MetadataItemPathRelations { get; set; }
        //public virtual DbSet<Page> Pages { get; set; }
        //public virtual DbSet<Permission> Permissions { get; set; }
        //public virtual DbSet<Role> Roles { get; set; }
        //public virtual DbSet<RoleUser> RoleUsers { get; set; }
        //public virtual DbSet<User> Users { get; set; }
        //public virtual DbSet<UserUsersGroup> UserUsersGroups { get; set; }
        //public virtual DbSet<UsersGroup> UsersGroups { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            #region Metadata configurators
            modelBuilder.ApplyConfiguration(new DatabaseInfoConfigurator());
            modelBuilder.ApplyConfiguration(new BusinessModuleConfigurator());
            modelBuilder.ApplyConfiguration(new BusinessObjectConfigurator());
            modelBuilder.ApplyConfiguration(new BusinessObjectGroupConfigurator());
            modelBuilder.ApplyConfiguration(new BusinessPropertyConfigurator());
            modelBuilder.ApplyConfiguration(new BusinessPropertyTypeConfigurator());
            modelBuilder.ApplyConfiguration(new BusinessObjectRelationConfigurator());
            modelBuilder.ApplyConfiguration(new ForeignKeyConfigurator());
            modelBuilder.ApplyConfiguration(new ImportInfoConfigurator());
            modelBuilder.ApplyConfiguration(new MetadataItemPathRelationConfigurator());
            modelBuilder.ApplyConfiguration(new EnumerationValueConfigurator());
            modelBuilder.ApplyConfiguration(new EnumerationTypeConfigurator());
            modelBuilder.ApplyConfiguration(new DatabaseDataTypeConfigurator());
            modelBuilder.ApplyConfiguration(new BusinessObjectExpressionConfigurator());

            modelBuilder.Entity<BusinessProperty>()
                .HasMany(m => m.MappingProperties)
                .WithMany(c => c.MappedProperties)
                .UsingEntity(c =>
                {
                    c.ToTable(("MappingProperties"),
                        MetadataNamesHelper.FdbaPrefix);
                });
            #endregion

            #region Expressions
            modelBuilder.ApplyConfiguration(new ExpressionNodeConfigurator<ExpressionNode>());
            modelBuilder.ApplyConfiguration(new BusinessObjectLeafNodeConfigurator());
            modelBuilder.ApplyConfiguration(new BusinessPropertyLeafNodeConfigurator());
            modelBuilder.ApplyConfiguration(new ConstantLeafNodeConfigurator());          
            modelBuilder.ApplyConfiguration(new ClrEnumerationLeafNodeConfigurator());
            modelBuilder.ApplyConfiguration(new EnumerationLeafNodeConfigurator());
            modelBuilder.ApplyConfiguration(new LogicalOperatorNodeConfigurator());
            modelBuilder.ApplyConfiguration(new ComparisonOperatorNodeConfigurator());
            modelBuilder.ApplyConfiguration(new SelectOperatorNodeConfigurator());
            modelBuilder.ApplyConfiguration(new WhereOperatorNodeConfigurator());
            modelBuilder.ApplyConfiguration(new TrinaryOperatorNodeConfigurator());
            modelBuilder.ApplyConfiguration(new QueryExpressionConfigurator());

            modelBuilder.ApplyConfiguration(new OrderByNodeConfigurator());
            modelBuilder.ApplyConfiguration(new OrderByNodeItemConfigurator());
            modelBuilder.ApplyConfiguration(new ExistsNodeConfigurator());
            modelBuilder.ApplyConfiguration(new InOperatorNodeConfigurator());
            modelBuilder.ApplyConfiguration(new AllAnyOperatorNodeConfigurator());
            #endregion


            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
