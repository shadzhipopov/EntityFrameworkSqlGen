// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Options;

namespace DynamicContextConsoleClient.Models
{
    public partial class BookShopApiContext : DbContext
    {
        public BookShopApiContext()
        {
        }

        public BookShopApiContext(DbContextOptions<BookShopApiContext> options)
            : base(options)
        {
            
        }

        public virtual DbSet<BusinessModule> BusinessModules { get; set; }
        public virtual DbSet<BusinessObject> BusinessObjects { get; set; }
        public virtual DbSet<BusinessObjectExpression> BusinessObjectExpressions { get; set; }
        public virtual DbSet<BusinessObjectGroup> BusinessObjectGroups { get; set; }
        public virtual DbSet<BusinessObjectRelation> BusinessObjectRelations { get; set; }
        public virtual DbSet<BusinessProperty> BusinessProperties { get; set; }
        public virtual DbSet<BusinessPropertyType> BusinessPropertyTypes { get; set; }
        public virtual DbSet<Container> Containers { get; set; }
        public virtual DbSet<DatabaseDataType> DatabaseDataTypes { get; set; }
        public virtual DbSet<DatabaseInfo> DatabaseInfos { get; set; }
        public virtual DbSet<EnumerationType> EnumerationTypes { get; set; }
        public virtual DbSet<EnumerationValue> EnumerationValues { get; set; }
        public virtual DbSet<ExpressionNode> ExpressionNodes { get; set; }
        public virtual DbSet<ForeignKey> ForeignKeys { get; set; }
        public virtual DbSet<ImportPropertyInfo> ImportPropertyInfos { get; set; }
        public virtual DbSet<MetadataItemPathRelation> MetadataItemPathRelations { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersGroup> UsersGroups { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("server=localhost;user id=postgres;password=1234;database=FdbaDb;");
            }
            //optionsBuilder.LogTo(Console.WriteLine);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BusinessModule>(entity =>
            {
                entity.ToTable("BusinessModule", "fdba");

                entity.HasIndex(e => e.DatabaseInfoId, "IX_BusinessModule_DatabaseInfoId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.DatabaseInfo)
                    .WithMany(p => p.BusinessModules)
                    .HasForeignKey(d => d.DatabaseInfoId);
            });

            modelBuilder.Entity<BusinessObject>(entity =>
            {
                entity.ToTable("BusinessObject", "fdba");

                entity.HasIndex(e => e.BaseObjectId, "IX_BusinessObject_BaseObjectId");

                entity.HasIndex(e => e.BusinessModuleId, "IX_BusinessObject_BusinessModuleId");

                entity.HasIndex(e => e.BusinessObjectGroupId, "IX_BusinessObject_BusinessObjectGroupId");

                entity.HasIndex(e => e.NamePropertyId, "IX_BusinessObject_NamePropertyId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.BaseObject)
                    .WithMany(p => p.InverseBaseObject)
                    .HasForeignKey(d => d.BaseObjectId);

                entity.HasOne(d => d.BusinessModule)
                    .WithMany(p => p.BusinessObjects)
                    .HasForeignKey(d => d.BusinessModuleId);

                entity.HasOne(d => d.BusinessObjectGroup)
                    .WithMany(p => p.BusinessObjects)
                    .HasForeignKey(d => d.BusinessObjectGroupId);

                entity.HasOne(d => d.NameProperty)
                    .WithMany(p => p.BusinessObjects)
                    .HasForeignKey(d => d.NamePropertyId);
            });

            modelBuilder.Entity<BusinessObjectExpression>(entity =>
            {
                entity.ToTable("BusinessObjectExpression", "fdba");

                entity.HasIndex(e => e.BusinessObjectId, "IX_BusinessObjectExpression_BusinessObjectId");

                entity.HasIndex(e => e.TargetPropertyId, "IX_BusinessObjectExpression_TargetPropertyId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.BusinessObject)
                    .WithMany(p => p.BusinessObjectExpressions)
                    .HasForeignKey(d => d.BusinessObjectId);

                entity.HasOne(d => d.TargetProperty)
                    .WithMany(p => p.BusinessObjectExpressions)
                    .HasForeignKey(d => d.TargetPropertyId);
            });

            modelBuilder.Entity<BusinessObjectGroup>(entity =>
            {
                entity.ToTable("BusinessObjectGroup", "fdba");

                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<BusinessObjectRelation>(entity =>
            {
                entity.ToTable("BusinessObjectRelation", "fdba");

                entity.HasIndex(e => e.FromObjectId, "IX_BusinessObjectRelation_FromObjectId");

                entity.HasIndex(e => e.ManyToManyObjectId, "IX_BusinessObjectRelation_ManyToManyObjectId");

                entity.HasIndex(e => e.ToObjectId, "IX_BusinessObjectRelation_ToObjectId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.FromObject)
                    .WithMany(p => p.BusinessObjectRelationFromObjects)
                    .HasForeignKey(d => d.FromObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ManyToManyObject)
                    .WithMany(p => p.BusinessObjectRelationManyToManyObjects)
                    .HasForeignKey(d => d.ManyToManyObjectId);

                entity.HasOne(d => d.ToObject)
                    .WithMany(p => p.BusinessObjectRelationToObjects)
                    .HasForeignKey(d => d.ToObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<BusinessProperty>(entity =>
            {
                entity.ToTable("BusinessProperty", "fdba");

                entity.HasIndex(e => e.BusinessObjectId, "IX_BusinessProperty_BusinessObjectId");

                entity.HasIndex(e => e.ComputeExpressionId, "IX_BusinessProperty_ComputeExpressionId");

                entity.HasIndex(e => e.EnumerationTypeId, "IX_BusinessProperty_EnumerationTypeId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.BusinessObject)
                    .WithMany(p => p.BusinessProperties)
                    .HasForeignKey(d => d.BusinessObjectId);

                entity.HasOne(d => d.ComputeExpression)
                    .WithMany(p => p.BusinessProperties)
                    .HasForeignKey(d => d.ComputeExpressionId)
                    .HasConstraintName("FK_BusinessProperty_BusinessObjectExpression_ComputeExpression~");

                entity.HasOne(d => d.EnumerationType)
                    .WithMany(p => p.BusinessProperties)
                    .HasForeignKey(d => d.EnumerationTypeId);

                entity.HasMany(d => d.MappedProperties)
                    .WithMany(p => p.MappingProperties)
                    .UsingEntity<Dictionary<string, object>>(
                        "MappingProperty",
                        l => l.HasOne<BusinessProperty>().WithMany().HasForeignKey("MappedPropertiesId"),
                        r => r.HasOne<BusinessProperty>().WithMany().HasForeignKey("MappingPropertiesId"),
                        j =>
                        {
                            j.HasKey("MappedPropertiesId", "MappingPropertiesId");

                            j.ToTable("MappingProperties", "fdba");

                            j.HasIndex(new[] { "MappingPropertiesId" }, "IX_MappingProperties_MappingPropertiesId");
                        });

                entity.HasMany(d => d.MappingProperties)
                    .WithMany(p => p.MappedProperties)
                    .UsingEntity<Dictionary<string, object>>(
                        "MappingProperty",
                        l => l.HasOne<BusinessProperty>().WithMany().HasForeignKey("MappingPropertiesId"),
                        r => r.HasOne<BusinessProperty>().WithMany().HasForeignKey("MappedPropertiesId"),
                        j =>
                        {
                            j.HasKey("MappedPropertiesId", "MappingPropertiesId");

                            j.ToTable("MappingProperties", "fdba");

                            j.HasIndex(new[] { "MappingPropertiesId" }, "IX_MappingProperties_MappingPropertiesId");
                        });
            });

            modelBuilder.Entity<BusinessPropertyType>(entity =>
            {
                entity.ToTable("BusinessPropertyType", "fdba");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.BusinessPropertyType)
                    .HasForeignKey<BusinessPropertyType>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Container>(entity =>
            {
                entity.ToTable("Container", "fdba");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.Containers)
                    .UsingEntity<Dictionary<string, object>>(
                        "ContainerRole",
                        l => l.HasOne<Role>().WithMany().HasForeignKey("RolesId"),
                        r => r.HasOne<Container>().WithMany().HasForeignKey("ContainersId"),
                        j =>
                        {
                            j.HasKey("ContainersId", "RolesId");

                            j.ToTable("ContainerRole", "fdba");

                            j.HasIndex(new[] { "RolesId" }, "IX_ContainerRole_RolesId");
                        });
            });

            modelBuilder.Entity<DatabaseDataType>(entity =>
            {
                entity.ToTable("DatabaseDataType", "fdba");

                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<DatabaseInfo>(entity =>
            {
                entity.ToTable("DatabaseInfo", "fdba");

                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<EnumerationType>(entity =>
            {
                entity.ToTable("EnumerationType", "fdba");

                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<EnumerationValue>(entity =>
            {
                entity.ToTable("EnumerationValue", "fdba");

                entity.HasIndex(e => e.EnumerationTypeId, "IX_EnumerationValue_EnumerationTypeId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.EnumerationType)
                    .WithMany(p => p.EnumerationValues)
                    .HasForeignKey(d => d.EnumerationTypeId);
            });

            modelBuilder.Entity<ExpressionNode>(entity =>
            {
                entity.ToTable("ExpressionNode", "fdba");

                entity.HasIndex(e => e.BusinessObjectExpressionId, "IX_ExpressionNode_BusinessObjectExpressionId");

                entity.HasIndex(e => e.BusinessPropertyId, "IX_ExpressionNode_BusinessPropertyId");

                entity.HasIndex(e => e.CountObjectId, "IX_ExpressionNode_CountObjectId");

                entity.HasIndex(e => e.CountPropertyId, "IX_ExpressionNode_CountPropertyId");

                entity.HasIndex(e => e.EnumerationTypeId, "IX_ExpressionNode_EnumerationTypeId");

                entity.HasIndex(e => e.EnumerationValueId, "IX_ExpressionNode_EnumerationValueId");

                entity.HasIndex(e => e.FromId, "IX_ExpressionNode_FromId");

                entity.HasIndex(e => e.InOperatorNodeNodeToCheckId, "IX_ExpressionNode_InOperatorNode_NodeToCheckId");

                entity.HasIndex(e => e.NodeToCheckId, "IX_ExpressionNode_NodeToCheckId");

                entity.HasIndex(e => e.ParentId, "IX_ExpressionNode_ParentId");

                entity.HasIndex(e => e.QueryId, "IX_ExpressionNode_QueryId");

                entity.HasIndex(e => e.RootId, "IX_ExpressionNode_RootId");

                entity.HasIndex(e => e.TargetObjectId, "IX_ExpressionNode_TargetObjectId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.InOperatorNodeNodeToCheckId).HasColumnName("InOperatorNode_NodeToCheckId");

                entity.Property(e => e.NodeType).IsRequired();

                entity.HasOne(d => d.BusinessObjectExpression)
                    .WithMany(p => p.ExpressionNodes)
                    .HasForeignKey(d => d.BusinessObjectExpressionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpressionNode_BusinessObjectExpression_BusinessObjectExpre~");

                entity.HasOne(d => d.BusinessProperty)
                    .WithMany(p => p.ExpressionNodeBusinessProperties)
                    .HasForeignKey(d => d.BusinessPropertyId);

                entity.HasOne(d => d.CountObject)
                    .WithMany(p => p.ExpressionNodeCountObjects)
                    .HasForeignKey(d => d.CountObjectId);

                entity.HasOne(d => d.CountProperty)
                    .WithMany(p => p.ExpressionNodeCountProperties)
                    .HasForeignKey(d => d.CountPropertyId);

                entity.HasOne(d => d.EnumerationType)
                    .WithMany(p => p.ExpressionNodes)
                    .HasForeignKey(d => d.EnumerationTypeId);

                entity.HasOne(d => d.EnumerationValue)
                    .WithMany(p => p.ExpressionNodes)
                    .HasForeignKey(d => d.EnumerationValueId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(d => d.From)
                    .WithMany(p => p.ExpressionNodeFroms)
                    .HasForeignKey(d => d.FromId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(d => d.InOperatorNodeNodeToCheck)
                    .WithMany(p => p.InverseInOperatorNodeNodeToCheck)
                    .HasForeignKey(d => d.InOperatorNodeNodeToCheckId);

                entity.HasOne(d => d.NodeToCheck)
                    .WithMany(p => p.InverseNodeToCheck)
                    .HasForeignKey(d => d.NodeToCheckId);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId);

                entity.HasOne(d => d.Query)
                    .WithMany(p => p.InverseQuery)
                    .HasForeignKey(d => d.QueryId);

                entity.HasOne(d => d.Root)
                    .WithMany(p => p.InverseRoot)
                    .HasForeignKey(d => d.RootId);

                entity.HasOne(d => d.TargetObject)
                    .WithMany(p => p.ExpressionNodeTargetObjects)
                    .HasForeignKey(d => d.TargetObjectId)
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<ForeignKey>(entity =>
            {
                entity.ToTable("ForeignKey", "fdba");

                entity.HasIndex(e => e.BusinessObjectRelationId, "IX_ForeignKey_BusinessObjectRelationId");

                entity.HasIndex(e => e.ForeignKeyPropertyId, "IX_ForeignKey_ForeignKeyPropertyId");

                entity.HasIndex(e => e.PrimaryKeyPropertyId, "IX_ForeignKey_PrimaryKeyPropertyId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.BusinessObjectRelation)
                    .WithMany(p => p.ForeignKeys)
                    .HasForeignKey(d => d.BusinessObjectRelationId);

                entity.HasOne(d => d.ForeignKeyProperty)
                    .WithMany(p => p.ForeignKeyForeignKeyProperties)
                    .HasForeignKey(d => d.ForeignKeyPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.PrimaryKeyProperty)
                    .WithMany(p => p.ForeignKeyPrimaryKeyProperties)
                    .HasForeignKey(d => d.PrimaryKeyPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ImportPropertyInfo>(entity =>
            {
                entity.ToTable("ImportPropertyInfo", "fdba");

                entity.HasIndex(e => e.ConvertedPropertyId, "IX_ImportPropertyInfo_ConvertedPropertyId")
                    .IsUnique();

                entity.HasIndex(e => e.OriginalPropertyTypeId, "IX_ImportPropertyInfo_OriginalPropertyTypeId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.ConvertedProperty)
                    .WithOne(p => p.ImportPropertyInfo)
                    .HasForeignKey<ImportPropertyInfo>(d => d.ConvertedPropertyId);

                entity.HasOne(d => d.OriginalPropertyType)
                    .WithMany(p => p.ImportPropertyInfos)
                    .HasForeignKey(d => d.OriginalPropertyTypeId);
            });

            modelBuilder.Entity<MetadataItemPathRelation>(entity =>
            {
                entity.ToTable("MetadataItemPathRelation", "fdba");

                entity.HasIndex(e => e.PathNodeId, "IX_MetadataItemPathRelation_PathNodeId");

                entity.HasIndex(e => e.RelationId, "IX_MetadataItemPathRelation_RelationId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.PathNode)
                    .WithMany(p => p.MetadataItemPathRelations)
                    .HasForeignKey(d => d.PathNodeId);

                entity.HasOne(d => d.Relation)
                    .WithMany(p => p.MetadataItemPathRelations)
                    .HasForeignKey(d => d.RelationId);
            });

            modelBuilder.Entity<Page>(entity =>
            {
                entity.ToTable("Page", "fdba");

                entity.HasIndex(e => e.FilterId, "IX_Page_FilterId");

                entity.HasIndex(e => e.PageObjectId, "IX_Page_PageObjectId");

                entity.HasIndex(e => e.QueryId, "IX_Page_QueryId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Filter)
                    .WithMany(p => p.PageFilters)
                    .HasForeignKey(d => d.FilterId);

                entity.HasOne(d => d.PageObject)
                    .WithMany(p => p.Pages)
                    .HasForeignKey(d => d.PageObjectId);

                entity.HasOne(d => d.Query)
                    .WithMany(p => p.PageQueries)
                    .HasForeignKey(d => d.QueryId);
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.ToTable("Permission", "fdba");

                entity.HasIndex(e => e.FilterExpressionId, "IX_Permission_FilterExpressionId");

                entity.HasIndex(e => e.ModuleId, "IX_Permission_ModuleId");

                entity.HasIndex(e => e.ObjectId, "IX_Permission_ObjectId");

                entity.HasIndex(e => e.PageId, "IX_Permission_PageId");

                entity.HasIndex(e => e.PropertyId, "IX_Permission_PropertyId");

                entity.HasIndex(e => e.RoleId, "IX_Permission_RoleId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Discriminator).IsRequired();

                entity.HasOne(d => d.FilterExpression)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.FilterExpressionId);

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.ModuleId);

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.ObjectId);

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.PageId);

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.PropertyId);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role", "fdba");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasMany(d => d.Users)
                    .WithMany(p => p.Roles)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoleUser",
                        l => l.HasOne<User>().WithMany().HasForeignKey("UsersId"),
                        r => r.HasOne<Role>().WithMany().HasForeignKey("RolesId"),
                        j =>
                        {
                            j.HasKey("RolesId", "UsersId");

                            j.ToTable("RoleUser", "fdba");

                            j.HasIndex(new[] { "UsersId" }, "IX_RoleUser_UsersId");
                        });
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("User", "fdba");

                entity.HasIndex(e => e.ContainerId, "IX_User_ContainerId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.ContainerId);
            });

            modelBuilder.Entity<UsersGroup>(entity =>
            {
                entity.ToTable("UsersGroup", "fdba");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasMany(d => d.Users)
                    .WithMany(p => p.Groups)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserUsersGroup",
                        l => l.HasOne<User>().WithMany().HasForeignKey("UsersId"),
                        r => r.HasOne<UsersGroup>().WithMany().HasForeignKey("GroupsId"),
                        j =>
                        {
                            j.HasKey("GroupsId", "UsersId");

                            j.ToTable("UserUsersGroup", "fdba");

                            j.HasIndex(new[] { "UsersId" }, "IX_UserUsersGroup_UsersId");
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}